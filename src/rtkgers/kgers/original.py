"""
See class summary.

The style guide follows the strict python PEP 8 guidelines.
@see http://www.python.org/dev/peps/pep-0008/

@author Aaron Zampaglione <azampagl@azampagl.com>
@requires Python >=2.7
@copyright 2014 - Present Aaron Zampaglione
"""
import rtkgers.utils.math as MathUtils
import rtkgers.utils.hyperplane as HyperplaneUtils

from rtkgers.hyperplane import Hyperplane
from rtkgers.kgers.core import KGERSCore

from rtkgers.exceptions.hyperplane import HyperplaneException


class KGERSOriginal(KGERSCore):
  """
  The original KGERS algorithn generates k hyperplanes and averages
  them using weights generated by cross validation.
  """

  def execute(self):
    """
    """

    # Determine the dimension so we can determine how many points
    #  for validation.
    dimensions = self.training[0].dimensions
    hyperplanes = []
    weights = []

    for i in range(0, self.config.getint('KGERS', 'K')):
      # Create a hyperplane from the training points.
      hyperplane = Hyperplane.sample(self.training)

      # Grab a set of validators that are not in the training set.
      validators = MathUtils.sample(
        self.training,
        dimensions,
        exclude=hyperplane.points)

      hyperplanes.append(hyperplane)

      # Find the weight for this hyperplane.
      weights.append(HyperplaneUtils.weigh(hyperplane, validators))

    self.coefficients = HyperplaneUtils.average(hyperplanes, weights)
